$timescale
 1s
$end

$scope module parser_test $end
$var reg        1 "    clk $end
$var reg        1 #    rst $end
$var reg       32 $    data_i [31:0] $end
$var reg       32 %    tag_o [31:0] $end
$var reg       32 &    body_o [31:0] $end
$var reg        1 '    tag_valid_o $end
$var reg        1 (    body_valid_o $end
$var reg        1 )    error $end

$scope module dut $end
$var wire       1 "    clk $end
$var wire       1 #    rst $end
$var wire      32 $    data_i [31:0] $end
$var wire      32 *    tag_o [31:0] $end
$var wire      32 +    body_o [31:0] $end
$var wire       1 ,    tag_valid_o $end
$var wire       1 -    body_valid_o $end
$var wire       3 .    soh_t [2:0] $end
$var wire       3 /    sep_t [2:0] $end
$var wire       1 0    tag_status_t_1 $end
$var wire       1 1    body_status_t_1 $end
$var wire       1 2    tag_status_t_2 $end
$var wire       1 3    body_status_t_2 $end

$scope module module_1 $end
$var wire       1 "    clk $end
$var wire       1 #    rst $end
$var wire      32 $    data_i [31:0] $end
$var wire       1 0    tag_status_i $end
$var wire       1 1    body_status_i $end
$var wire       3 .    soh_o [2:0] $end
$var wire       3 /    sep_o [2:0] $end
$var wire       1 2    tag_status_o $end
$var wire       1 3    body_status_o $end
$var reg        3 4    soh [2:0] $end
$var reg        3 5    sep [2:0] $end
$var reg        1 6    tag_status $end
$var reg        1 7    body_status $end
$var reg        8 8    soh_c [7:0] $end
$var reg        8 9    sep_c [7:0] $end
$upscope $end

$scope module module_2 $end
$var wire      32 $    data_i [31:0] $end
$var wire       3 .    soh_i [2:0] $end
$var wire       3 /    sep_i [2:0] $end
$var wire       1 2    tag_status_i $end
$var wire       1 3    body_status_i $end
$var wire      32 *    tag_o [31:0] $end
$var wire      32 +    body_o [31:0] $end
$var wire       1 0    tag_status_o $end
$var wire       1 1    body_status_o $end
$var wire       1 ,    tag_valid_o $end
$var wire       1 -    body_valid_o $end
$var wire       2 :    data_type [1:0] $end
$var reg       32 ;    tag [31:0] $end
$var reg       32 <    body [31:0] $end
$var reg        1 =    tag_status $end
$var reg        1 >    body_status $end
$var reg        8 ?    padding [7:0] $end
$var reg        1 @    tag_valid $end
$var reg        1 A    body_valid $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0A
06
b00000000000000000000000000000000 +
07
0,
b00000001 8
0-
0"
b00111101 9
b111 .
0#
bzz :
b111 /
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx $
b00000000000000000000000000000000 ;
00
b00000000000000000000000000000000 %
b00000000000000000000000000000000 <
01
b00000000000000000000000000000000 &
0=
02
0'
0>
03
0(
b00000000 ?
b111 4
0)
0@
b111 5
b00000000000000000000000000000000 *
$end
#1
1"
#2
17
1,
b011 .
b000 /
b00000001001100100011001000111101 $
b00000000000000000011001000110010 ;
b00000000000000000011001000110010 %
11
1'
1>
13
b011 4
1@
b000 5
b00000000000000000011001000110010 *
0"
#3
1"
#4
1A
16
b00000000000000000011001100110011 +
1-
10
b00000000000000000011001100110011 <
b00000000000000000011001100110011 &
1=
12
1(
07
b001 .
b111 /
b00110011001100110000000100110010 $
b00000000000000000000000000110010 ;
b00000000000000000000000000110010 %
01
0>
03
b001 4
b111 5
b00000000000000000000000000110010 *
0"
#5
1"
#6
0A
b00000000000000000000000000000000 +
0-
b00000000000000000000000000000000 <
b00000000000000000000000000000000 &
0(
b111 .
b00111001001100100011001100110110 $
b00111001001100100011001100110110 ;
b00111001001100100011001100110110 %
b111 4
b00111001001100100011001100110110 *
0"
#7
1"
#8
0"
#9
1"
#10
0"
